/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templat    @Override
    public void adjustmentValueChanged(AdjustmentEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
es/GUIForms/JFrame.java to edit this template
 */ //hi yani
package bankersalgo;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;

/**
 *
 * @author Juliana
 */
public class Dashboard extends javax.swing.JFrame {

    private BankersAlgorithm banker = new BankersAlgorithm();
    private static final String PLACEHODER_GUEST = "Enter guest name";
    private String selectedGuestName = null;

    public Dashboard() {
        this.setLocationRelativeTo(null);
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        this.setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2);
        //Dashboard - Guest Allocations table
        jScrollPaneDashboard.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneDashboard.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPaneDashboard.setViewportView(jtblGuestAllocations);

        //Dashboard - Needs & Request Table
        jScrollPaneDashboard1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneDashboard1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPaneDashboard1.setViewportView(jtblNeedsRequests);

        //Dashboard - Resource Status
        jScrollPaneDashboard2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneDashboard2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPaneDashboard2.setViewportView(jtblResourceStatus);
        //Dashboard - Resource Status
        jScrollPaneArchived.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneArchived.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPaneArchived.setViewportView(jtblArchived);

        placeHolderEffect(jtxtFieldSearchBar, "Enter guest name");
        placeHolderEffect(jtxtFieldGuest, "Enter guest name");
        updateAvailabilityLabels();
        refreshTables();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogCheckin = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jlblTitleCheckin = new javax.swing.JLabel();
        jlblSearchGuest = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jSpinner4 = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSpinner5 = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        jSpinner6 = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jlblRegular = new javax.swing.JLabel();
        jlblDeluxe = new javax.swing.JLabel();
        jlblStaff = new javax.swing.JLabel();
        jbtnCloseCheckin = new javax.swing.JButton();
        jbtnConfirmAllocation = new javax.swing.JButton();
        jtxtFieldGuest = new javax.swing.JTextField();
        jDialogCheckout = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jlblTitleCheckout = new javax.swing.JLabel();
        jlblSearch = new javax.swing.JLabel();
        jtxtFieldSearch = new javax.swing.JTextField();
        jlblNote = new javax.swing.JLabel();
        jbtnCheckoutClose = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jbtnCheckoutSearch = new javax.swing.JButton();
        jDialogArchived = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jScrollPaneArchived = new javax.swing.JScrollPane();
        jtblArchived = new javax.swing.JTable();
        jbtnCloseArchived = new javax.swing.JButton();
        jtxtFieldSearchBar = new javax.swing.JTextField();
        jbtnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jDialogEdit = new javax.swing.JDialog();
        jPanel6 = new javax.swing.JPanel();
        jlblTitleCheckin1 = new javax.swing.JLabel();
        jlblSearchGuest1 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jSpinner7 = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jSpinner8 = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        jSpinner10 = new javax.swing.JSpinner();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jSpinner11 = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();
        jSpinner12 = new javax.swing.JSpinner();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel7 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jlblRegular1 = new javax.swing.JLabel();
        jlblDeluxe1 = new javax.swing.JLabel();
        jlblStaff1 = new javax.swing.JLabel();
        jbtnCloseEdit = new javax.swing.JButton();
        jbtnConfirmEditActionPerformed = new javax.swing.JButton();
        jtxtFieldGuest1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlblTitleDashboard = new javax.swing.JLabel();
        jlblGuestAllocations = new javax.swing.JLabel();
        jlblNeedRequests = new javax.swing.JLabel();
        jlblResourceStatus = new javax.swing.JLabel();
        jScrollPaneDashboard = new javax.swing.JScrollPane();
        jtblGuestAllocations = new javax.swing.JTable();
        jScrollPaneDashboard1 = new javax.swing.JScrollPane();
        jtblNeedsRequests = new javax.swing.JTable();
        jScrollPaneDashboard2 = new javax.swing.JScrollPane();
        jtblResourceStatus = new javax.swing.JTable();
        jbtnCheckin = new javax.swing.JButton();
        jbtnEdit = new javax.swing.JButton();
        jbtnArchived = new javax.swing.JButton();
        jbtnLogout = new javax.swing.JButton();
        jbtnCheckout1 = new javax.swing.JButton();

        jDialogCheckin.setBackground(new java.awt.Color(255, 255, 255));
        jDialogCheckin.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialogCheckin.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jDialogCheckin.setForeground(new java.awt.Color(243, 212, 178));
        jDialogCheckin.setResizable(false);
        jDialogCheckin.setType(java.awt.Window.Type.POPUP);

        jPanel1.setBackground(new java.awt.Color(243, 212, 178));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(685, 775));

        jlblTitleCheckin.setFont(new java.awt.Font("Afacad", 1, 36)); // NOI18N
        jlblTitleCheckin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitleCheckin.setText("Resource Allocation Check-In");

        jlblSearchGuest.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jlblSearchGuest.setText("Guest Name (Process ID)");

        jLabel6.setFont(new java.awt.Font("Afacad", 1, 24)); // NOI18N
        jLabel6.setText("Room Allocation");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        jSpinner1.setName(""); // NOI18N

        jLabel7.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel7.setText("Regular Suite");

        jLabel8.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel8.setText("Deluxe Suites");

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel10.setFont(new java.awt.Font("Afacad", 1, 24)); // NOI18N
        jLabel10.setText("Max Need (Room Type)");

        jSpinner4.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel11.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel11.setText("Max Regular");

        jLabel12.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel12.setText("Max Deluxe");

        jSpinner5.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel13.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel13.setText("Max Staff Need");

        jSpinner6.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jPanel2.setBackground(new java.awt.Color(243, 212, 178));

        jLabel14.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jLabel14.setText("Available Resources");

        jlblRegular.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jlblRegular.setText("Regular:");

        jlblDeluxe.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jlblDeluxe.setText("Deluxe:");

        jlblStaff.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jlblStaff.setText("Staff: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jlblRegular)
                .addGap(79, 79, 79)
                .addComponent(jlblDeluxe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(jlblStaff)
                .addGap(93, 93, 93))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblRegular)
                    .addComponent(jlblDeluxe)
                    .addComponent(jlblStaff))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jbtnCloseCheckin.setBackground(new java.awt.Color(171, 125, 76));
        jbtnCloseCheckin.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jbtnCloseCheckin.setForeground(new java.awt.Color(243, 212, 178));
        jbtnCloseCheckin.setText("Close");
        jbtnCloseCheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseCheckinActionPerformed(evt);
            }
        });

        jbtnConfirmAllocation.setBackground(new java.awt.Color(171, 125, 76));
        jbtnConfirmAllocation.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jbtnConfirmAllocation.setForeground(new java.awt.Color(243, 212, 178));
        jbtnConfirmAllocation.setText("Confirm Allocation");
        jbtnConfirmAllocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnConfirmAllocationActionPerformed(evt);
            }
        });

        jtxtFieldGuest.setText("Enter Guest Name");
        jtxtFieldGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtFieldGuestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6)
                                    .addComponent(jlblSearchGuest)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel8)
                                                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jtxtFieldGuest, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(5, 5, 5))
                                    .addComponent(jLabel10)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(178, 178, 178)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jSpinner6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 115, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jlblTitleCheckin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnCloseCheckin)
                .addGap(35, 35, 35)
                .addComponent(jbtnConfirmAllocation)
                .addGap(65, 65, 65))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblTitleCheckin)
                .addGap(18, 18, 18)
                .addComponent(jlblSearchGuest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtxtFieldGuest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnCloseCheckin)
                    .addComponent(jbtnConfirmAllocation))
                .addGap(117, 117, 117))
        );

        javax.swing.GroupLayout jDialogCheckinLayout = new javax.swing.GroupLayout(jDialogCheckin.getContentPane());
        jDialogCheckin.getContentPane().setLayout(jDialogCheckinLayout);
        jDialogCheckinLayout.setHorizontalGroup(
            jDialogCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDialogCheckinLayout.setVerticalGroup(
            jDialogCheckinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
        );

        jDialogCheckout.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialogCheckout.setMinimumSize(new java.awt.Dimension(574, 318));
        jDialogCheckout.setResizable(false);

        jPanel4.setBackground(new java.awt.Color(243, 212, 178));

        jlblTitleCheckout.setFont(new java.awt.Font("Afacad", 1, 48)); // NOI18N
        jlblTitleCheckout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitleCheckout.setText("Guest Check-Out");

        jlblSearch.setFont(new java.awt.Font("Afacad", 1, 18)); // NOI18N
        jlblSearch.setText("Search guest");

        jtxtFieldSearch.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jtxtFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtFieldSearchActionPerformed(evt);
            }
        });

        jlblNote.setFont(new java.awt.Font("Afacad", 1, 14)); // NOI18N
        jlblNote.setText("Start typing to find your reservation");

        jbtnCheckoutClose.setBackground(new java.awt.Color(171, 125, 76));
        jbtnCheckoutClose.setFont(new java.awt.Font("Afacad", 1, 18)); // NOI18N
        jbtnCheckoutClose.setForeground(new java.awt.Color(255, 238, 219));
        jbtnCheckoutClose.setText("Close");
        jbtnCheckoutClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCheckoutCloseActionPerformed(evt);
            }
        });

        jbtnCheckoutSearch.setBackground(new java.awt.Color(171, 125, 76));
        jbtnCheckoutSearch.setFont(new java.awt.Font("Afacad", 1, 18)); // NOI18N
        jbtnCheckoutSearch.setForeground(new java.awt.Color(255, 238, 219));
        jbtnCheckoutSearch.setText("Search");
        jbtnCheckoutSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCheckoutSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jlblTitleCheckout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlblSearch)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jlblNote))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jtxtFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jbtnCheckoutSearch))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(238, 238, 238)
                                .addComponent(jbtnCheckoutClose)))
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jlblTitleCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlblSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCheckoutSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlblNote)
                .addGap(66, 66, 66)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtnCheckoutClose)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogCheckoutLayout = new javax.swing.GroupLayout(jDialogCheckout.getContentPane());
        jDialogCheckout.getContentPane().setLayout(jDialogCheckoutLayout);
        jDialogCheckoutLayout.setHorizontalGroup(
            jDialogCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDialogCheckoutLayout.setVerticalGroup(
            jDialogCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDialogArchived.setAutoRequestFocus(false);

        jPanel5.setBackground(new java.awt.Color(243, 212, 178));

        jtblArchived.setBackground(new java.awt.Color(255, 238, 219));
        jtblArchived.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jtblArchived.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Guest", " Alloc. Regular", " Alloc. Deluxe ", "Alloc. Staff", "Max Regular", "Max Deluxe", "Max Staff"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblArchived.getTableHeader().setReorderingAllowed(false);
        jScrollPaneArchived.setViewportView(jtblArchived);

        jbtnCloseArchived.setBackground(new java.awt.Color(171, 125, 76));
        jbtnCloseArchived.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jbtnCloseArchived.setForeground(new java.awt.Color(255, 238, 219));
        jbtnCloseArchived.setText("Close");
        jbtnCloseArchived.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseArchivedActionPerformed(evt);
            }
        });

        jtxtFieldSearchBar.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jtxtFieldSearchBar.setText("Enter guest name");
        jtxtFieldSearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtFieldSearchBarActionPerformed(evt);
            }
        });

        jbtnSearch.setBackground(new java.awt.Color(171, 125, 76));
        jbtnSearch.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jbtnSearch.setForeground(new java.awt.Color(255, 238, 219));
        jbtnSearch.setText("Search");
        jbtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSearchActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Afacad", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Archived Records");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jtxtFieldSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbtnCloseArchived)
                            .addComponent(jScrollPaneArchived, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtFieldSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneArchived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnCloseArchived)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialogArchivedLayout = new javax.swing.GroupLayout(jDialogArchived.getContentPane());
        jDialogArchived.getContentPane().setLayout(jDialogArchivedLayout);
        jDialogArchivedLayout.setHorizontalGroup(
            jDialogArchivedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDialogArchivedLayout.setVerticalGroup(
            jDialogArchivedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDialogEdit.setBackground(new java.awt.Color(255, 255, 255));
        jDialogEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialogEdit.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jDialogEdit.setForeground(new java.awt.Color(243, 212, 178));
        jDialogEdit.setResizable(false);
        jDialogEdit.setType(java.awt.Window.Type.POPUP);

        jPanel6.setBackground(new java.awt.Color(243, 212, 178));
        jPanel6.setForeground(new java.awt.Color(255, 255, 255));
        jPanel6.setPreferredSize(new java.awt.Dimension(685, 775));

        jlblTitleCheckin1.setFont(new java.awt.Font("Afacad", 1, 36)); // NOI18N
        jlblTitleCheckin1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitleCheckin1.setText("Needs and Requests");

        jlblSearchGuest1.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jlblSearchGuest1.setText("Guest Name (Process ID)");

        jLabel15.setFont(new java.awt.Font("Afacad", 1, 24)); // NOI18N
        jLabel15.setText("Needed Room");

        jSpinner7.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        jSpinner7.setName(""); // NOI18N

        jLabel16.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel16.setText("Regular Suite");

        jLabel17.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel17.setText("Deluxe Suites");

        jSpinner8.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel19.setFont(new java.awt.Font("Afacad", 1, 24)); // NOI18N
        jLabel19.setText("Requested Room");

        jSpinner10.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel20.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel20.setText("Max Regular");

        jLabel21.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel21.setText("Max Deluxe");

        jSpinner11.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel22.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jLabel22.setText("Max Staff Need");

        jSpinner12.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jPanel7.setBackground(new java.awt.Color(243, 212, 178));

        jLabel23.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jLabel23.setText("Available Resources");

        jlblRegular1.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jlblRegular1.setText("Regular:");

        jlblDeluxe1.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jlblDeluxe1.setText("Deluxe:");

        jlblStaff1.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jlblStaff1.setText("Staff: ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel23)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jlblRegular1)
                .addGap(79, 79, 79)
                .addComponent(jlblDeluxe1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(jlblStaff1)
                .addGap(93, 93, 93))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addGap(26, 26, 26)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblRegular1)
                    .addComponent(jlblDeluxe1)
                    .addComponent(jlblStaff1))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jbtnCloseEdit.setBackground(new java.awt.Color(171, 125, 76));
        jbtnCloseEdit.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jbtnCloseEdit.setForeground(new java.awt.Color(243, 212, 178));
        jbtnCloseEdit.setText("Close");
        jbtnCloseEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseEditActionPerformed(evt);
            }
        });

        jbtnConfirmEditActionPerformed.setBackground(new java.awt.Color(171, 125, 76));
        jbtnConfirmEditActionPerformed.setFont(new java.awt.Font("Afacad", 0, 18)); // NOI18N
        jbtnConfirmEditActionPerformed.setForeground(new java.awt.Color(243, 212, 178));
        jbtnConfirmEditActionPerformed.setText("Confirm Updated Allocation");
        jbtnConfirmEditActionPerformed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnConfirmEditActionPerformedActionPerformed(evt);
            }
        });

        jtxtFieldGuest1.setText("Enter Guest Name");
        jtxtFieldGuest1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtFieldGuest1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel15)
                                    .addComponent(jlblSearchGuest1)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel6Layout.createSequentialGroup()
                                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel16)
                                                    .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel17)
                                                    .addComponent(jSpinner8, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jtxtFieldGuest1, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(5, 5, 5))
                                    .addComponent(jLabel19)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel6Layout.createSequentialGroup()
                                                .addComponent(jSpinner10, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                                .addComponent(jLabel20)
                                                .addGap(178, 178, 178)))
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel21)
                                            .addComponent(jSpinner11, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jSpinner12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel22)))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 106, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jlblTitleCheckin1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnCloseEdit)
                .addGap(18, 18, 18)
                .addComponent(jbtnConfirmEditActionPerformed)
                .addGap(65, 65, 65))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblTitleCheckin1)
                .addGap(18, 18, 18)
                .addComponent(jlblSearchGuest1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtxtFieldGuest1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(94, 94, 94)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21))
                .addGap(9, 9, 9)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnCloseEdit)
                    .addComponent(jbtnConfirmEditActionPerformed))
                .addGap(117, 117, 117))
        );

        javax.swing.GroupLayout jDialogEditLayout = new javax.swing.GroupLayout(jDialogEdit.getContentPane());
        jDialogEdit.getContentPane().setLayout(jDialogEditLayout);
        jDialogEditLayout.setHorizontalGroup(
            jDialogEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDialogEditLayout.setVerticalGroup(
            jDialogEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Olde Hearth || Dashboard");
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setName("FrameDashboard"); // NOI18N

        jPanel3.setBackground(new java.awt.Color(243, 212, 178));

        jlblTitleDashboard.setFont(new java.awt.Font("Afacad", 1, 48)); // NOI18N
        jlblTitleDashboard.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitleDashboard.setText("Hotel Management Dashboard");
        jlblTitleDashboard.setToolTipText("");
        jlblTitleDashboard.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jlblGuestAllocations.setFont(new java.awt.Font("Afacad", 1, 24)); // NOI18N
        jlblGuestAllocations.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblGuestAllocations.setText("Guest Allocations & Max Claims");

        jlblNeedRequests.setFont(new java.awt.Font("Afacad", 1, 24)); // NOI18N
        jlblNeedRequests.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblNeedRequests.setText("Needs & Requests");

        jlblResourceStatus.setFont(new java.awt.Font("Afacad", 1, 24)); // NOI18N
        jlblResourceStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblResourceStatus.setText("Resource Status");

        jScrollPaneDashboard.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jtblGuestAllocations.setBackground(new java.awt.Color(255, 238, 219));
        jtblGuestAllocations.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jtblGuestAllocations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Guest ", "Alloc. Regular", "Alloc. Deluxe", "Alloc. Staff", "Max Regular", "Max Deluxe", "Max Staff"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneDashboard.setViewportView(jtblGuestAllocations);

        jtblNeedsRequests.setBackground(new java.awt.Color(255, 238, 219));
        jtblNeedsRequests.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jtblNeedsRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Guest ", "Need Regular", "Need Deluxe", "Need Staff", "Req. Regular", "Req. Deluxe", "Req. Staff", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneDashboard1.setViewportView(jtblNeedsRequests);

        jtblResourceStatus.setBackground(new java.awt.Color(255, 238, 219));
        jtblResourceStatus.setFont(new java.awt.Font("Afacad", 0, 14)); // NOI18N
        jtblResourceStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Resource  ", "Max", "Allocated", "Available", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneDashboard2.setViewportView(jtblResourceStatus);

        jbtnCheckin.setBackground(new java.awt.Color(171, 125, 76));
        jbtnCheckin.setFont(new java.awt.Font("Afacad", 1, 18)); // NOI18N
        jbtnCheckin.setForeground(new java.awt.Color(255, 238, 219));
        jbtnCheckin.setText("Checkin");
        jbtnCheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCheckinActionPerformed(evt);
            }
        });

        jbtnEdit.setBackground(new java.awt.Color(171, 125, 76));
        jbtnEdit.setFont(new java.awt.Font("Afacad", 1, 18)); // NOI18N
        jbtnEdit.setForeground(new java.awt.Color(255, 238, 219));
        jbtnEdit.setText("Edit");
        jbtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditActionPerformed(evt);
            }
        });

        jbtnArchived.setBackground(new java.awt.Color(171, 125, 76));
        jbtnArchived.setFont(new java.awt.Font("Afacad", 1, 18)); // NOI18N
        jbtnArchived.setForeground(new java.awt.Color(255, 238, 219));
        jbtnArchived.setText("Archived");
        jbtnArchived.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnArchivedActionPerformed(evt);
            }
        });

        jbtnLogout.setBackground(new java.awt.Color(171, 125, 76));
        jbtnLogout.setFont(new java.awt.Font("Afacad", 1, 18)); // NOI18N
        jbtnLogout.setForeground(new java.awt.Color(255, 238, 219));
        jbtnLogout.setText("Logout");
        jbtnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLogoutActionPerformed(evt);
            }
        });

        jbtnCheckout1.setBackground(new java.awt.Color(171, 125, 76));
        jbtnCheckout1.setFont(new java.awt.Font("Afacad", 1, 18)); // NOI18N
        jbtnCheckout1.setForeground(new java.awt.Color(255, 238, 219));
        jbtnCheckout1.setText("Checkout");
        jbtnCheckout1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCheckout1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneDashboard1)
                            .addComponent(jScrollPaneDashboard2)
                            .addComponent(jlblResourceStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlblNeedRequests, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jbtnCheckin)
                                .addGap(18, 18, 18)
                                .addComponent(jbtnCheckout1)
                                .addGap(18, 18, 18)
                                .addComponent(jbtnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbtnArchived))
                            .addComponent(jScrollPaneDashboard, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlblGuestAllocations, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(110, 110, 110))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jlblTitleDashboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnLogout)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblTitleDashboard)
                    .addComponent(jbtnLogout))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtnCheckin)
                        .addComponent(jbtnEdit)
                        .addComponent(jbtnCheckout1))
                    .addComponent(jbtnArchived))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlblGuestAllocations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlblNeedRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPaneDashboard1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jlblResourceStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneDashboard2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtFieldSearchActionPerformed

    //Dashboard Buttons
    private void jbtnCheckoutCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCheckoutCloseActionPerformed
        jDialogCheckout.setVisible(false); // Close the checkout dialog
    }//GEN-LAST:event_jbtnCheckoutCloseActionPerformed

    private void jbtnCloseCheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseCheckinActionPerformed
        jDialogCheckin.setVisible(false); // Close the check-in dialog
    }//GEN-LAST:event_jbtnCloseCheckinActionPerformed

    private void jbtnCloseArchivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseArchivedActionPerformed
        jDialogArchived.setVisible(false);
    }//GEN-LAST:event_jbtnCloseArchivedActionPerformed

    private void jbtnCheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCheckinActionPerformed
        jDialogCheckin.pack();
        jDialogCheckin.setLocationRelativeTo(this);
        jDialogCheckin.setVisible(true);

    }//GEN-LAST:event_jbtnCheckinActionPerformed

    private void jbtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditActionPerformed
        int selectedRow = jtblGuestAllocations.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a guest to edit.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        selectedGuestName = jtblGuestAllocations.getValueAt(selectedRow, 0).toString(); // Save name globally
        try (Connection conn = DatabaseConnection.getConnection()) {
            String sql = "SELECT * FROM guests WHERE guest_name = ? AND status = 'Check-In'";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, selectedGuestName);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    // Populate dialog fields
                    jtxtFieldGuest1.setText(rs.getString("guest_name"));
                    jSpinner7.setValue(rs.getInt("allocated_regular"));
                    jSpinner8.setValue(rs.getInt("allocated_deluxe"));

                    jSpinner10.setValue(rs.getInt("max_regular"));
                    jSpinner11.setValue(rs.getInt("max_deluxe"));
                    jSpinner12.setValue(rs.getInt("max_staff"));

                    jDialogEdit.pack();
                    jDialogEdit.setLocationRelativeTo(this);
                    jDialogEdit.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Guest not found or already checked out.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jbtnEditActionPerformed

    private void jbtnArchivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnArchivedActionPerformed
        jDialogArchived.pack();
        jDialogArchived.setLocationRelativeTo(this);
        handleArchivedRecords();
        jDialogArchived.setVisible(true);


    }//GEN-LAST:event_jbtnArchivedActionPerformed

    private void jtxtFieldGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtFieldGuestActionPerformed
        jtxtFieldGuest.setText(null);
    }//GEN-LAST:event_jtxtFieldGuestActionPerformed

    private void jbtnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLogoutActionPerformed
        // Show confirmation dialog with custom icon
        int confirm = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to logout?",
                "Confirm Logout",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (confirm == JOptionPane.YES_OPTION) {
            // Log the logout event (optional)
            System.out.println("User logged out at: " + new java.util.Date());

            // Close the current dashboard
            this.dispose();

            // Open the login window
            java.awt.EventQueue.invokeLater(() -> {
                new Login().setVisible(true); // Replace Login with your actual login class
            });
        }
    }//GEN-LAST:event_jbtnLogoutActionPerformed


    private void jtxtFieldSearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtFieldSearchBarActionPerformed
        String keyword = jtxtFieldSearchBar.getText().trim();

        if (!keyword.equals("") && !keyword.equals(PLACEHODER_GUEST)) {
            searchArchivedRecords(keyword);
        }
    }//GEN-LAST:event_jtxtFieldSearchBarActionPerformed

    private void jbtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSearchActionPerformed
        String keyword = jtxtFieldSearchBar.getText().trim();
        searchArchivedRecords(keyword);
    }//GEN-LAST:event_jbtnSearchActionPerformed

    private void jbtnCheckoutSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCheckoutSearchActionPerformed
        String searchName = jtxtFieldSearch.getText().trim();
        handleGuestCheckOut(searchName);
    }//GEN-LAST:event_jbtnCheckoutSearchActionPerformed


    private void jbtnConfirmAllocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnConfirmAllocationActionPerformed

        // Get all input values
        String guestName = jtxtFieldGuest.getText().trim();

        // Validate guest name
        if (guestName.isEmpty() || guestName.equals(PLACEHODER_GUEST)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid guest name", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get allocation values
        int allocRegular = (Integer) jSpinner1.getValue();
        int allocDeluxe = (Integer) jSpinner2.getValue();
        int allocStaff = (allocRegular + allocDeluxe); // 1 staff per room

        // Get max need values
        int maxRegular = (Integer) jSpinner4.getValue();
        int maxDeluxe = (Integer) jSpinner5.getValue();
        int maxStaff = (Integer) jSpinner6.getValue();

        // Validate that allocation doesn't exceed max need
        if (allocRegular > maxRegular || allocDeluxe > maxDeluxe || allocStaff > maxStaff) {
            JOptionPane.showMessageDialog(this,
                    "Allocation cannot exceed maximum need!\n"
                    + "Regular: " + allocRegular + "/" + maxRegular + "\n"
                    + "Deluxe: " + allocDeluxe + "/" + maxDeluxe + "\n"
                    + "Staff: " + allocStaff + "/" + maxStaff,
                    "Allocation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection()) {
            conn.setAutoCommit(false); // Start transaction

            try {
                // 1. Check if guest already exists
                String checkSql = "SELECT COUNT(*) FROM guests WHERE guest_name = ? AND status = 'Check-In'";
                try (PreparedStatement checkStmt = conn.prepareStatement(checkSql)) {
                    checkStmt.setString(1, guestName);
                    ResultSet rs = checkStmt.executeQuery();
                    if (rs.next() && rs.getInt(1) > 0) {
                        JOptionPane.showMessageDialog(this,
                                "Guest " + guestName + " is already checked in!",
                                "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                // 2. Check available resources
                String availSql = "SELECT resource_type, available FROM resource_allocation";
                int availRegular = 0;
                int availDeluxe = 0;
                int availStaff = 0;

                try (PreparedStatement availStmt = conn.prepareStatement(availSql); ResultSet rs = availStmt.executeQuery()) {
                    while (rs.next()) {
                        switch (rs.getString("resource_type")) {
                            case "regular_suite" ->
                                availRegular = rs.getInt("available");
                            case "deluxe_suite" ->
                                availDeluxe = rs.getInt("available");
                            case "house_staff" ->
                                availStaff = rs.getInt("available");
                        }
                    }
                }

                // Check basic availability
                if (allocRegular > availRegular || allocDeluxe > availDeluxe || allocStaff > availStaff) {
                    StringBuilder errorMsg = new StringBuilder("✗ Not enough available resources:\n");

                    if (allocRegular > availRegular) {
                        errorMsg.append("• Regular Suites: Requested ").append(allocRegular)
                                .append(", Available ").append(availRegular).append("\n");
                    }
                    if (allocDeluxe > availDeluxe) {
                        errorMsg.append("• Deluxe Suites: Requested ").append(allocDeluxe)
                                .append(", Available ").append(availDeluxe).append("\n");
                    }
                    if (allocStaff > availStaff) {
                        errorMsg.append("• House Staff: Requested ").append(allocStaff)
                                .append(", Available ").append(availStaff).append("\n");
                    }

                    errorMsg.append("\nPlease adjust your request.");

                    JOptionPane.showMessageDialog(this, errorMsg.toString(),
                            "Insufficient Resources", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // 3. Check safety using Banker's algorithm
                // Get current allocations and max needs
                String allocSql = "SELECT allocated_regular, allocated_deluxe, allocated_staff, "
                        + "max_regular, max_deluxe, max_staff FROM guests WHERE status = 'Check-In'";

                List<int[]> allocations = new ArrayList<>();
                List<int[]> maxNeeds = new ArrayList<>();
                int[] work = {availRegular, availDeluxe, availStaff};

                try (PreparedStatement allocStmt = conn.prepareStatement(allocSql); ResultSet rs = allocStmt.executeQuery()) {
                    while (rs.next()) {
                        int[] alloc = {
                            rs.getInt("allocated_regular"),
                            rs.getInt("allocated_deluxe"),
                            rs.getInt("allocated_staff")
                        };
                        int[] max = {
                            rs.getInt("max_regular"),
                            rs.getInt("max_deluxe"),
                            rs.getInt("max_staff")
                        };
                        allocations.add(alloc);
                        maxNeeds.add(max);
                    }
                }

                // Add the new potential allocation
                allocations.add(new int[]{allocRegular, allocDeluxe, allocStaff});
                maxNeeds.add(new int[]{maxRegular, maxDeluxe, maxStaff});

                // Initialize work vector (available resources after granting this request)
                work[0] -= allocRegular;
                work[1] -= allocDeluxe;
                work[2] -= allocStaff;

                // Banker's safety algorithm
                boolean[] finish = new boolean[allocations.size()];
                boolean found;

                do {
                    found = false;
                    for (int i = 0; i < allocations.size(); i++) {
                        if (!finish[i]) {
                            int[] need = {
                                maxNeeds.get(i)[0] - allocations.get(i)[0],
                                maxNeeds.get(i)[1] - allocations.get(i)[1],
                                maxNeeds.get(i)[2] - allocations.get(i)[2]
                            };

                            if (need[0] <= work[0] && need[1] <= work[1] && need[2] <= work[2]) {
                                // Pretend this process finishes and releases its resources
                                work[0] += allocations.get(i)[0];
                                work[1] += allocations.get(i)[1];
                                work[2] += allocations.get(i)[2];
                                finish[i] = true;
                                found = true;
                            }
                        }
                    }
                } while (found);

                // Check if all processes can finish
                boolean safe = true;
                for (boolean f : finish) {
                    if (!f) {
                        safe = false;
                        break;
                    }
                }

                if (!safe) {
                    JOptionPane.showMessageDialog(this,
                            "✗ This allocation would make the system unsafe.\n"
                            + "Please reduce your resource requests.",
                            "Unsafe Allocation", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // 4. Show confirmation dialog
                int confirm = JOptionPane.showConfirmDialog(
                        this,
                        "✓ Allocation is safe!\n\n"
                        + "Guest Name: " + guestName + "\n"
                        + "Allocation:\n"
                        + " - Regular Suites: " + allocRegular + "\n"
                        + " - Deluxe Suites: " + allocDeluxe + "\n"
                        + " - Staff: " + allocStaff + "\n\n"
                        + "Maximum Needs:\n"
                        + " - Regular: " + maxRegular + "\n"
                        + " - Deluxe: " + maxDeluxe + "\n"
                        + " - Staff: " + maxStaff + "\n\n"
                        + "Confirm check-in?",
                        "Confirm Allocation",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );

                if (confirm != JOptionPane.YES_OPTION) {
                    return;
                }

                // 5. Insert new guest allocation
                String insertSql = "INSERT INTO guests (guest_name, allocated_regular, allocated_deluxe, allocated_staff, "
                        + "max_regular, max_deluxe, max_staff, status) VALUES (?, ?, ?, ?, ?, ?, ?, 'Check-In')";
                try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
                    insertStmt.setString(1, guestName);
                    insertStmt.setInt(2, allocRegular);
                    insertStmt.setInt(3, allocDeluxe);
                    insertStmt.setInt(4, allocStaff);
                    insertStmt.setInt(5, maxRegular);
                    insertStmt.setInt(6, maxDeluxe);
                    insertStmt.setInt(7, maxStaff);
                    insertStmt.executeUpdate();
                }

                // 6. Update resource allocations
                String updateSql = "UPDATE resource_allocation SET "
                        + "allocated = allocated + ?, "
                        + "available = available - ? "
                        + "WHERE resource_type = ?";

                try (PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {
                    // Update regular suites
                    updateStmt.setInt(1, allocRegular);
                    updateStmt.setInt(2, allocRegular);
                    updateStmt.setString(3, "regular_suite");
                    updateStmt.executeUpdate();

                    // Update deluxe suites
                    updateStmt.setInt(1, allocDeluxe);
                    updateStmt.setInt(2, allocDeluxe);
                    updateStmt.setString(3, "deluxe_suite");
                    updateStmt.executeUpdate();

                    // Update staff
                    updateStmt.setInt(1, allocStaff);
                    updateStmt.setInt(2, allocStaff);
                    updateStmt.setString(3, "house_staff");
                    updateStmt.executeUpdate();
                }

                conn.commit(); // Commit transaction

                JOptionPane.showMessageDialog(this,
                        "Check-In successful for " + guestName,
                        "Success", JOptionPane.INFORMATION_MESSAGE);

                // Reset form
                jtxtFieldGuest.setText(PLACEHODER_GUEST);
                jtxtFieldGuest.setForeground(Color.GRAY);
                jSpinner1.setValue(0);
                jSpinner2.setValue(0);
                jSpinner4.setValue(0);
                jSpinner5.setValue(0);
                jSpinner6.setValue(0);

                jDialogCheckin.setVisible(false);

                // Refresh displays
                refreshTables();
                updateAvailabilityLabels();

                // Update Needs/Requests Table (2nd Table)
                int[] request = {allocRegular, allocDeluxe, allocStaff};
                updateNeedsRequestsTable(jtblNeedsRequests, request, guestName);

            } catch (SQLException e) {
                conn.rollback();
                JOptionPane.showMessageDialog(this,
                        "Database error: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Connection error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_jbtnConfirmAllocationActionPerformed

    private void jbtnCheckout1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCheckout1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnCheckout1ActionPerformed

    private void jbtnCloseEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseEditActionPerformed
        // Close the edit dialog
        jDialogEdit.setVisible(false);
        // Retrieve the allocation values from the spinners
        int allocRegular = (Integer) jSpinner7.getValue();
        int allocDeluxe = (Integer) jSpinner8.getValue();
        int allocStaff = allocRegular + allocDeluxe; // Assuming 1 staff per room
        // Update the needs requests table
        int[] request = {allocRegular, allocDeluxe, allocStaff};
        updateNeedsRequestsTable(jtblNeedsRequests, request, selectedGuestName);
    }//GEN-LAST:event_jbtnCloseEditActionPerformed

    private void jbtnConfirmEditActionPerformedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnConfirmEditActionPerformedActionPerformed
    
    try {                                                               
        
        if (selectedGuestName == null) {
            JOptionPane.showMessageDialog(this, "No guest selected for editing.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String guestName = selectedGuestName;
        
        int allocRegular = (Integer) jSpinner7.getValue();
        int allocDeluxe = (Integer) jSpinner8.getValue();
        int allocStaff = allocRegular + allocDeluxe;
        
        int maxRegular = (Integer) jSpinner10.getValue();
        int maxDeluxe = (Integer) jSpinner11.getValue();
        int maxStaff = (Integer) jSpinner12.getValue();
        
        // Check available resources before proceeding
        int[] available = getCurrentAvailableResources();
        if (available == null) {
            JOptionPane.showMessageDialog(this, "Error fetching available resources.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Validate that allocation doesn't exceed available resources
        if (allocRegular > available[0] || allocDeluxe > available[1] || allocStaff > available[2]) {
            StringBuilder errorMsg = new StringBuilder("✗ Not enough available resources:\n");
            
            if (allocRegular > available[0]) {
                errorMsg.append("• Regular Suites: Requested ").append(allocRegular)
                        .append(", Available ").append(available[0]).append("\n");
            }
            if (allocDeluxe > available[1]) {
                errorMsg.append("• Deluxe Suites: Requested ").append(allocDeluxe)
                        .append(", Available ").append(available[1]).append("\n");
            }
            if (allocStaff > available[2]) {
                errorMsg.append("• House Staff: Requested ").append(allocStaff)
                        .append(", Available ").append(available[2]).append("\n");
            }
            
            errorMsg.append("\nPlease adjust your request.");
            
            JOptionPane.showMessageDialog(this, errorMsg.toString(),
                    "Insufficient Resources", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Proceed with the safety check using Banker's algorithm
        if (!isSafeAllocation(guestName, allocRegular, allocDeluxe, maxRegular, maxDeluxe, maxStaff)) {
            JOptionPane.showMessageDialog(this,
                    "✗ This allocation would make the system unsafe.\n"
                            + "Please reduce your resource requests.",
                    "Unsafe Allocation", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Proceed with updating the guest record and resources
        try (Connection conn = DatabaseConnection.getConnection()) {
            conn.setAutoCommit(false);
            
            // 1. Get current allocations from DB
            String currentSql = "SELECT allocated_regular, allocated_deluxe, allocated_staff FROM guests WHERE guest_name = ? AND status = 'Check-In'";
            int oldRegular = 0, oldDeluxe = 0, oldStaff = 0;
            
            try (PreparedStatement stmt = conn.prepareStatement(currentSql)) {
                stmt.setString(1, guestName);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    oldRegular = rs.getInt("allocated_regular");
                    oldDeluxe = rs.getInt("allocated_deluxe");
                    oldStaff = rs.getInt("allocated_staff");
                }
            }
            
            // 2. Update guest record
            String updateGuestSql = "UPDATE guests SET allocated_regular=?, allocated_deluxe=?, allocated_staff=?, "
                    + "max_regular=?, max_deluxe=?, max_staff=? WHERE guest_name=? AND status = 'Check-In'";
            try (PreparedStatement stmt = conn.prepareStatement(updateGuestSql)) {
                stmt.setInt(1, allocRegular);
                stmt.setInt(2, allocDeluxe);
                stmt.setInt(3, allocStaff);
                stmt.setInt(4, maxRegular);
                stmt.setInt(5, maxDeluxe);
                stmt.setInt(6, maxStaff);
                stmt.setString(7, guestName);
                stmt.executeUpdate();
            }
            
            // 3. Adjust resource_allocation
            String updateResSql = "UPDATE resource_allocation SET allocated = allocated + ?, available = available - ? WHERE resource_type = ?";
            
            try (PreparedStatement stmt = conn.prepareStatement(updateResSql)) {
                // Regular
                int diff = allocRegular - oldRegular;
                stmt.setInt(1, diff);
                stmt.setInt(2, diff);
                stmt.setString(3, "regular_suite");
                stmt.executeUpdate();
                
                // Deluxe
                diff = allocDeluxe - oldDeluxe;
                stmt.setInt(1, diff);
                stmt.setInt(2, diff);
                stmt.setString(3, "deluxe_suite");
                stmt.executeUpdate();
                
                // Staff
                diff = allocStaff - oldStaff;
                stmt.setInt(1, diff);
                stmt.setInt(2, diff);
                stmt.setString(3, "house_staff");
                stmt.executeUpdate();
            }
            
            conn.commit();
            
            JOptionPane.showMessageDialog(this, "Guest allocation updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Update Needs/Requests Table (2nd Table)
            int[] request = {allocRegular, allocDeluxe, allocStaff};
            updateNeedsRequestsTable(jtblNeedsRequests, request, guestName); // Update the Needs and Requests table
            
            jDialogEdit.setVisible(false);
            refreshTables();
            updateAvailabilityLabels();
            selectedGuestName = null;
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating guest: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jbtnConfirmEditActionPerformedActionPerformed

    private void jtxtFieldGuest1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtFieldGuest1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtFieldGuest1ActionPerformed

    public void placeHolderEffect(JTextField field, String placeholderText) {
        field.setForeground(Color.GRAY);
        field.setText(placeholderText);

        field.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (field.getText().equals(placeholderText)) {
                    field.setText("");
                    field.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (field.getText().trim().isEmpty()) {
                    field.setText(placeholderText);
                    field.setForeground(Color.GRAY);
                }
            }
        });
    }

    // Add this method to refresh all tables
    private void refreshTables() {
        banker.updateResourceDisplay(jtblResourceStatus);
        banker.updateGuestTable(jtblGuestAllocations);

    }

    //Searching in Archived
    private void searchArchivedRecords(String keyword) {
        DefaultTableModel model = (DefaultTableModel) jtblArchived.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jtblArchived.setRowSorter(sorter);

        if (keyword.isEmpty() || keyword.equals(PLACEHODER_GUEST)) {
            sorter.setRowFilter(null); // Show all when search is empty
        } else {
            // Search only in the guest name column (column 0)
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + keyword, 0));
        }
    }

    /*------------------Functions for the Tables-----------------------*/
    //Shows the available resources
    private void updateAvailabilityLabels() {
        String query = "SELECT resource_type, available FROM resource_allocation";

        try (Connection conn = DatabaseConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String type = rs.getString("resource_type");
                int available = rs.getInt("available");

                switch (type) {
                    case "regular_suite":
                        jlblRegular.setText("Regular Suites: " + String.valueOf(available));
                        break;
                    case "deluxe_suite":
                        jlblDeluxe.setText("Deluxe Suites: " + String.valueOf(available));
                        break;
                    case "house_staff":
                        jlblStaff.setText("Staff: " + String.valueOf(available));
                        break;
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to fetch availability.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void handleGuestCheckOut(String searchName) {
        try (Connection conn = DatabaseConnection.getConnection()) {
            // Query to find guests who are currently checked in
            String query = "SELECT * FROM guests WHERE guest_name LIKE ? AND status = ?";
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, "%" + searchName + "%");
            pstmt.setString(2, GuestStatus.CHECK_IN.getStatus()); // Use enum for status
            ResultSet rs = pstmt.executeQuery();

            if (!rs.next()) {
                JOptionPane.showMessageDialog(this,
                        "✗ No active reservation found for: " + searchName,
                        "Guest Not Found", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Retrieve guest data
            String guestName = rs.getString("guest_name");
            int allocRegular = rs.getInt("allocated_regular");
            int allocDeluxe = rs.getInt("allocated_deluxe");
            int allocStaff = rs.getInt("allocated_staff");

            // Show confirmation dialog with guest info
            StringBuilder guestInfo = new StringBuilder("✓ Guest Found:\n\n");
            guestInfo.append("Name: ").append(guestName).append("\n");
            guestInfo.append("Regular Suites: ").append(allocRegular).append("\n");
            guestInfo.append("Deluxe Suites: ").append(allocDeluxe).append("\n");
            guestInfo.append("House Staff Assigned: ").append(allocStaff).append("\n");
            guestInfo.append("Would you like to complete the check-out?");

            int confirm = JOptionPane.showConfirmDialog(this, guestInfo.toString(),
                    "Confirm Check-Out", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Perform the check-out
                String updateSQL = "UPDATE guests SET status = ? WHERE guest_name = ? AND status = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSQL);
                updateStmt.setString(1, GuestStatus.CHECK_OUT.getStatus()); // Update status to Check-Out
                updateStmt.setString(2, guestName);
                updateStmt.setString(3, GuestStatus.CHECK_IN.getStatus()); // Ensure the current status is Check-In
                updateStmt.executeUpdate();

                // Restore the resources
                banker.updateResourceAllocation(-allocRegular, -allocDeluxe, -allocStaff);
                refreshTables();
                JOptionPane.showMessageDialog(this,
                        "✓ Check-out completed for guest: " + guestName,
                        "Check-Out Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error during check-out: " + e.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void handleArchivedRecords() {
        try (Connection conn = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM guests WHERE status = ?";
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, GuestStatus.CHECK_OUT.getStatus()); // Use enum for status
            ResultSet rs = pstmt.executeQuery();

            // Clear existing rows in the archived table
            DefaultTableModel model = (DefaultTableModel) jtblArchived.getModel();
            model.setRowCount(0); // Clear existing rows

            // Populate the table with archived records
            while (rs.next()) {
                String guestName = rs.getString("guest_name");
                int allocRegular = rs.getInt("allocated_regular");
                int allocDeluxe = rs.getInt("allocated_deluxe");
                int allocStaff = rs.getInt("allocated_staff");
                int maxRegular = rs.getInt("max_regular");
                int maxDeluxe = rs.getInt("max_Deluxe");
                int maxStaff = rs.getInt("max_Staff");
                // Add a new row to the table
                model.addRow(new Object[]{guestName, allocRegular, allocDeluxe, allocStaff, maxRegular, maxDeluxe, maxStaff});
            }

            // Show a message if no records are found
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this,
                        "✗ No archived records found.",
                        "No Records", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching archived records: " + e.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void updateNeedsRequestsTable(JTable table, int[] request, String requestingGuest) {
    try (Connection conn = DatabaseConnection.getConnection()) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); // Clear existing data

        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM guests WHERE status = 'Check-In'");

        int[] available = getCurrentAvailableResources();

        while (rs.next()) {
            String name = rs.getString("guest_name");
            int[] alloc = {
                rs.getInt("allocated_regular"),
                rs.getInt("allocated_deluxe"),
                rs.getInt("allocated_staff")
            };
            int[] max = {
                rs.getInt("max_regular"),
                rs.getInt("max_deluxe"),
                rs.getInt("max_staff")
            };

            int[] need = new int[3];
            for (int i = 0; i < 3; i++) {
                need[i] = max[i] - alloc[i];
            }

            int[] req = {0, 0, 0};
            String status = "—";

            if (name.equalsIgnoreCase(requestingGuest)) {
                req = request;

                boolean reqWithinNeed = req[0] <= need[0] && req[1] <= need[1] && req[2] <= need[2];
                boolean reqWithinAvail = req[0] <= available[0] && req[1] <= available[1] && req[2] <= available[2];

                if (!reqWithinNeed) {
                    status = "Invalid";
                } else if (!reqWithinAvail) {
                    status = "Pending";
                } else {
                    boolean safe = isSafeAllocation(name, req[0], req[1], max[0], max[1], max[2]);
                    status = safe ? "Approved" : "Denied";
                }
            }

            model.addRow(new Object[]{
                name,
                need[0], need[1], need[2],
                req[0], req[1], req[2],
                status
            });
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}


    //Current Resources
    private int[] getCurrentAvailableResources() throws SQLException {
        int[] available = new int[3];
        try (Connection conn = DatabaseConnection.getConnection()) {
        
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM resource_allocation");
        while (rs.next()) {
            switch (rs.getString("resource_type")) {
                case "regular_suite" ->
                    available[0] = rs.getInt("available");
                case "deluxe_suite" ->
                    available[1] = rs.getInt("available");
                case "house_staff" ->
                    available[2] = rs.getInt("available");
            }
        }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching archived records: " + e.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        return available;
    }

    //Determines if the available resources are still safe when a guest requests
    private boolean isSafeState(List<Guest> guests, Resources resources) {
        int[] work = resources.getAvailable().clone();
        boolean[] finish = new boolean[guests.size()];
        int finishedCount = 0;

        while (finishedCount < guests.size()) {
            boolean progress = false;
            for (int i = 0; i < guests.size(); i++) {
                if (!finish[i]) {
                    int[] need = guests.get(i).getNeed();
                    if (need[0] <= work[0] && need[1] <= work[1] && need[2] <= work[2]) {
                        int[] alloc = guests.get(i).allocated;
                        for (int j = 0; j < 3; j++) {
                            work[j] += alloc[j];
                        }
                        finish[i] = true;
                        finishedCount++;
                        progress = true;
                    }
                }
            }

            if (!progress) {
                return false;
            }
        }

        return true;
    }
    
    public int[] getAvailableResources() {
    String query = "SELECT available FROM resource_allocation ORDER BY resource_type";
    int[] available = new int[3]; // regular, deluxe, staff
    
    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {
        
        if (rs.next()) available[0] = rs.getInt(1); // regular
        if (rs.next()) available[1] = rs.getInt(1); // deluxe
        if (rs.next()) available[2] = rs.getInt(1); // staff
        
        return available;
    } catch (SQLException e) {
        e.printStackTrace();
        return null;
    }
}

    public boolean isSafeAllocation(String guestName, 
                              int reqRegular, int reqDeluxe,
                              int maxRegular, int maxDeluxe, int maxStaff) {
    // Calculate staff required (1 staff per room)
    int reqStaff = reqRegular + reqDeluxe;
    
    // 1. Get current state from database
    int[] available = getAvailableResources();
    if (available == null) return false;
    
    // 2. Check if requested resources exceed available
    if (reqRegular > available[0] || reqDeluxe > available[1] || reqStaff > available[2]) {
        return false;
    }

    // 3. Temporarily allocate resources for safety check
    available[0] -= reqRegular;
    available[1] -= reqDeluxe;
    available[2] -= reqStaff;

    // 4. Get all current allocations and max needs
    List<Guest> guests = getAllGuests();
    
    // Add the new potential guest to the list
    guests.add(new Guest(
        new int[]{reqRegular, reqDeluxe, reqStaff},
        new int[]{maxRegular, maxDeluxe, maxStaff}
    ));

    // 5. Implement Banker's safety algorithm
    int[] work = Arrays.copyOf(available, available.length);
    boolean[] finish = new boolean[guests.size()];
    
    // Initialize finish array
    Arrays.fill(finish, false);
    
    // Find a guest that can finish with current work
    boolean found;
    do {
        found = false;
        for (int i = 0; i < guests.size(); i++) {
            if (!finish[i]) {
                Guest g = guests.get(i);
                int[] need = g.getNeed();
                
                if (need[0] <= work[0] && need[1] <= work[1] && need[2] <= work[2]) {
                    // This guest can finish - pretend to release their resources
                    work[0] += g.allocated[0];
                    work[1] += g.allocated[1];
                    work[2] += g.allocated[2];
                    finish[i] = true;
                    found = true;
                }
            }
        }
    } while (found);
    
    // If all guests can finish, the state is safe
    for (boolean f : finish) {
        if (!f) return false;
    }
    
    return true;
}
    private List<Guest> getAllGuests() {
    List<Guest> guests = new ArrayList<>();
    String query = "SELECT guest_name, allocated_regular, allocated_deluxe, allocated_staff, " +
                  "max_regular, max_deluxe, max_staff FROM guests";
    
    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            guests.add(new Guest(
                rs.getString("guest_name"),
                rs.getInt("allocated_regular"),
                rs.getInt("allocated_deluxe"),
                rs.getInt("allocated_staff"),
                rs.getInt("max_regular"),
                rs.getInt("max_deluxe"),
                rs.getInt("max_staff")
            ));
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    
    return guests;
}
// 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog jDialogArchived;
    private javax.swing.JDialog jDialogCheckin;
    private javax.swing.JDialog jDialogCheckout;
    private javax.swing.JDialog jDialogEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPaneArchived;
    private javax.swing.JScrollPane jScrollPaneDashboard;
    private javax.swing.JScrollPane jScrollPaneDashboard1;
    private javax.swing.JScrollPane jScrollPaneDashboard2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner10;
    private javax.swing.JSpinner jSpinner11;
    private javax.swing.JSpinner jSpinner12;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JSpinner jSpinner6;
    private javax.swing.JSpinner jSpinner7;
    private javax.swing.JSpinner jSpinner8;
    private javax.swing.JButton jbtnArchived;
    private javax.swing.JButton jbtnCheckin;
    private javax.swing.JButton jbtnCheckout1;
    private javax.swing.JButton jbtnCheckoutClose;
    private javax.swing.JButton jbtnCheckoutSearch;
    private javax.swing.JButton jbtnCloseArchived;
    private javax.swing.JButton jbtnCloseCheckin;
    private javax.swing.JButton jbtnCloseEdit;
    private javax.swing.JButton jbtnConfirmAllocation;
    private javax.swing.JButton jbtnConfirmEditActionPerformed;
    private javax.swing.JButton jbtnEdit;
    private javax.swing.JButton jbtnLogout;
    private javax.swing.JButton jbtnSearch;
    private javax.swing.JLabel jlblDeluxe;
    private javax.swing.JLabel jlblDeluxe1;
    private javax.swing.JLabel jlblGuestAllocations;
    private javax.swing.JLabel jlblNeedRequests;
    private javax.swing.JLabel jlblNote;
    private javax.swing.JLabel jlblRegular;
    private javax.swing.JLabel jlblRegular1;
    private javax.swing.JLabel jlblResourceStatus;
    private javax.swing.JLabel jlblSearch;
    private javax.swing.JLabel jlblSearchGuest;
    private javax.swing.JLabel jlblSearchGuest1;
    private javax.swing.JLabel jlblStaff;
    private javax.swing.JLabel jlblStaff1;
    private javax.swing.JLabel jlblTitleCheckin;
    private javax.swing.JLabel jlblTitleCheckin1;
    private javax.swing.JLabel jlblTitleCheckout;
    private javax.swing.JLabel jlblTitleDashboard;
    private javax.swing.JTable jtblArchived;
    private javax.swing.JTable jtblGuestAllocations;
    private javax.swing.JTable jtblNeedsRequests;
    private javax.swing.JTable jtblResourceStatus;
    private javax.swing.JTextField jtxtFieldGuest;
    private javax.swing.JTextField jtxtFieldGuest1;
    private javax.swing.JTextField jtxtFieldSearch;
    private javax.swing.JTextField jtxtFieldSearchBar;
    // End of variables declaration//GEN-END:variables
}
